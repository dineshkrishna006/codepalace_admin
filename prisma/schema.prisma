generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(cuid())
  name             String?
  email            String            @unique
  emailVerified    DateTime?
  image            String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  score            Int               @default(0)
  streak           Int               @default(0)
  accounts         Account[]
  Authenticator    Authenticator[]
  problems         JSolvedUsers[]
  collections      Collection[]
  savedCollections JUserCollection[]
  leaderboard      Leaderboard?
  sessions         Session[]
  submissions      Submission[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Submission {
  submission_id String   @id @default(cuid())
  problem_id    Int
  user_id       String
  code          String
  accepted      Boolean
  failed_cases  Int
  time          String
  memory        String
  submittedAt   DateTime @default(now())
  problem       Problem  @relation(fields: [problem_id], references: [problem_id], onDelete: Cascade)
  user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model JSolvedUsers {
  user_id    String
  problem_id Int
  problem    Problem @relation(fields: [problem_id], references: [problem_id], onDelete: Cascade)
  user       User    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([user_id, problem_id])
}

model Problem {
  problem_id   Int                  @id @default(autoincrement())
  title        String               @unique
  slug         String               @unique
  statement    String
  difficulty   String
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  points       Int
  Answers      Answers?
  users_solved JSolvedUsers[]
  tags         JunctionTags[]
  submissions  Submission[]
  testcases    Testcase[]
  collections  JCollectionProblem[]
}

model Testcase {
  problem_id      Int
  stdin           String
  expected_output String
  problem         Problem @relation(fields: [problem_id], references: [problem_id], onDelete: Cascade)

  @@id([problem_id, stdin])
}

model Tag {
  tag_id   Int            @id @default(autoincrement())
  name     String         @unique
  problems JunctionTags[]
}

model JunctionTags {
  problem_id Int
  tag_id     Int

  problem Problem @relation(fields: [problem_id], references: [problem_id], onDelete: Cascade)
  tag     Tag     @relation(fields: [tag_id], references: [tag_id], onDelete: Cascade)

  @@id([problem_id, tag_id])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Leaderboard {
  username                   String  @unique
  user_id                    String  @unique
  codechefusername           String? @unique
  codeforcesusername         String? @unique
  leetcodeusername           String? @unique
  codechefRating             Int?
  codechefProblemsSolved     Int?
  codechefContestsAttended   Int?
  codeforcesRating           Int?
  codeforcesContestsAttended Int?
  leetcodeRating             Int?
  leetcodeProblemsSolved     Int?
  leetcodeContestsAttended   Int?
  user                       User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Answers {
  id        String  @id @default(cuid())
  problemid Int     @unique
  answer    String
  problem   Problem @relation(fields: [problemid], references: [problem_id], onDelete: Cascade)
}

model Collection {
  collection_id String               @id @default(cuid())
  name          String
  isPublic      Boolean              @default(false)
  saved         Int                  @default(0)
  owner_id      String
  slug          String               @unique
  users         User                 @relation(fields: [owner_id], references: [id], onDelete: Cascade)
  publicUsers   JUserCollection[]
  problems      JCollectionProblem[]
}

model JUserCollection {
  user_id       String
  collection_id String
  collections   Collection @relation(fields: [collection_id], references: [collection_id], onDelete: Cascade)
  users         User       @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([user_id, collection_id])
}

model JCollectionProblem {
  collection_id String
  problem_id    Int
  problem       Problem    @relation(fields: [problem_id], references: [problem_id], onDelete: Cascade)
  collection    Collection @relation(fields: [collection_id], references: [collection_id], onDelete: Cascade)

  @@id([collection_id, problem_id])
}
